/* tslint:disable */
/* eslint-disable */
/**
 * Quote Portal API
 * API documentation for Quote Portal
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Quote,
  QuotesSetStatusRequest,
} from '../models/index';
import {
    QuoteFromJSON,
    QuoteToJSON,
    QuotesSetStatusRequestFromJSON,
    QuotesSetStatusRequestToJSON,
} from '../models/index';

export interface QuotesCreateRequest {
    opportunityId: string;
    customerName: string;
    customerEmail: string;
    customerCompany?: string;
    supportingDocument?: Blob | null;
}

export interface QuotesReadRequest {
    id: string;
}

export interface QuotesSetStatusOperationRequest {
    id: string;
    data: QuotesSetStatusRequest;
}

export interface QuotesUploadFileRequest {
    id: string;
    supportingDocument?: Blob | null;
}

/**
 * 
 */
export class QuotesApi extends runtime.BaseAPI {

    /**
     * Submits a new quote for review. The user submitting the request will be marked as the owner.
     * Submit a new quote
     */
    async quotesCreateRaw(requestParameters: QuotesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['opportunityId'] == null) {
            throw new runtime.RequiredError(
                'opportunityId',
                'Required parameter "opportunityId" was null or undefined when calling quotesCreate().'
            );
        }

        if (requestParameters['customerName'] == null) {
            throw new runtime.RequiredError(
                'customerName',
                'Required parameter "customerName" was null or undefined when calling quotesCreate().'
            );
        }

        if (requestParameters['customerEmail'] == null) {
            throw new runtime.RequiredError(
                'customerEmail',
                'Required parameter "customerEmail" was null or undefined when calling quotesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['opportunityId'] != null) {
            formParams.append('opportunity_id', requestParameters['opportunityId'] as any);
        }

        if (requestParameters['customerName'] != null) {
            formParams.append('customer_name', requestParameters['customerName'] as any);
        }

        if (requestParameters['customerEmail'] != null) {
            formParams.append('customer_email', requestParameters['customerEmail'] as any);
        }

        if (requestParameters['customerCompany'] != null) {
            formParams.append('customer_company', requestParameters['customerCompany'] as any);
        }

        if (requestParameters['supportingDocument'] != null) {
            formParams.append('supporting_document', requestParameters['supportingDocument'] as any);
        }


        let urlPath = `/quotes/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Submits a new quote for review. The user submitting the request will be marked as the owner.
     * Submit a new quote
     */
    async quotesCreate(requestParameters: QuotesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.quotesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of quotes. Sales users see their own quotes; admins see all quotes.
     * List quotes
     */
    async quotesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Quote>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/quotes/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuoteFromJSON));
    }

    /**
     * Returns a list of quotes. Sales users see their own quotes; admins see all quotes.
     * List quotes
     */
    async quotesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Quote>> {
        const response = await this.quotesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a specific quote by its ID.
     * Retrieve a quote
     */
    async quotesReadRaw(requestParameters: QuotesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling quotesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/quotes/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a specific quote by its ID.
     * Retrieve a quote
     */
    async quotesRead(requestParameters: QuotesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.quotesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the status of a quote. This action is restricted to admin users. Valid statuses are \'Approved\' and \'Rejected\'. For conversions, other conditions apply.
     * Set quote status (Admin only)
     */
    async quotesSetStatusRaw(requestParameters: QuotesSetStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling quotesSetStatus().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling quotesSetStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/quotes/{id}/set_status/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuotesSetStatusRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Changes the status of a quote. This action is restricted to admin users. Valid statuses are \'Approved\' and \'Rejected\'. For conversions, other conditions apply.
     * Set quote status (Admin only)
     */
    async quotesSetStatus(requestParameters: QuotesSetStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.quotesSetStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads a file as a supporting document for an existing quote. This can be done by the quote owner or an admin.
     * Upload a supporting document
     */
    async quotesUploadFileRaw(requestParameters: QuotesUploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling quotesUploadFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['supportingDocument'] != null) {
            formParams.append('supporting_document', requestParameters['supportingDocument'] as any);
        }


        let urlPath = `/quotes/{id}/upload_file/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Uploads a file as a supporting document for an existing quote. This can be done by the quote owner or an admin.
     * Upload a supporting document
     */
    async quotesUploadFile(requestParameters: QuotesUploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.quotesUploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
