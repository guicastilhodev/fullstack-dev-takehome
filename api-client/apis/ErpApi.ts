/* tslint:disable */
/* eslint-disable */
/**
 * Quote Portal API
 * API documentation for Quote Portal
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErpOrdersCreateRequest,
} from '../models/index';
import {
    ErpOrdersCreateRequestFromJSON,
    ErpOrdersCreateRequestToJSON,
} from '../models/index';

export interface ErpOrdersCreateOperationRequest {
    data: ErpOrdersCreateRequest;
}

/**
 * 
 */
export class ErpApi extends runtime.BaseAPI {

    /**
     * Simulate ERP order creation. Accepts order data as JSON.
     */
    async erpOrdersCreateRaw(requestParameters: ErpOrdersCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling erpOrdersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/erp/orders/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ErpOrdersCreateRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Simulate ERP order creation. Accepts order data as JSON.
     */
    async erpOrdersCreate(requestParameters: ErpOrdersCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.erpOrdersCreateRaw(requestParameters, initOverrides);
    }

    /**
     * List mock ERP orders.
     */
    async erpOrdersListListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/erp/orders/list/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List mock ERP orders.
     */
    async erpOrdersListList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.erpOrdersListListRaw(initOverrides);
    }

}
