/* tslint:disable */
/* eslint-disable */
/**
 * Quote Portal API
 * API documentation for Quote Portal
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IntegrationLog,
} from '../models/index';
import {
    IntegrationLogFromJSON,
    IntegrationLogToJSON,
} from '../models/index';

export interface LogsByActionRequest {
    action?: LogsByActionActionEnum;
}

export interface LogsReadRequest {
    id: string;
}

/**
 * 
 */
export class LogsApi extends runtime.BaseAPI {

    /**
     * Returns all logs filtered by action type (ERP, CRM, STATUS, etc.).
     * Get logs by action type
     */
    async logsByActionRaw(requestParameters: LogsByActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IntegrationLog>>> {
        const queryParameters: any = {};

        if (requestParameters['action'] != null) {
            queryParameters['action'] = requestParameters['action'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/logs/by_action/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntegrationLogFromJSON));
    }

    /**
     * Returns all logs filtered by action type (ERP, CRM, STATUS, etc.).
     * Get logs by action type
     */
    async logsByAction(requestParameters: LogsByActionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IntegrationLog>> {
        const response = await this.logsByActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all logs associated with a specific quote.
     * Get logs by quote ID
     */
    async logsByQuoteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IntegrationLog>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/logs/by_quote/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntegrationLogFromJSON));
    }

    /**
     * Returns all logs associated with a specific quote.
     * Get logs by quote ID
     */
    async logsByQuote(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IntegrationLog>> {
        const response = await this.logsByQuoteRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of integration logs. Sales users see their own logs; admins see all logs.
     * List integration logs
     */
    async logsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IntegrationLog>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/logs/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntegrationLogFromJSON));
    }

    /**
     * Returns a list of integration logs. Sales users see their own logs; admins see all logs.
     * List integration logs
     */
    async logsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IntegrationLog>> {
        const response = await this.logsListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a specific log entry by its ID.
     * Retrieve a log entry
     */
    async logsReadRaw(requestParameters: LogsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationLog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling logsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/logs/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationLogFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a specific log entry by its ID.
     * Retrieve a log entry
     */
    async logsRead(requestParameters: LogsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationLog> {
        const response = await this.logsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const LogsByActionActionEnum = {
    Erp: 'ERP',
    Crm: 'CRM',
    Status: 'STATUS'
} as const;
export type LogsByActionActionEnum = typeof LogsByActionActionEnum[keyof typeof LogsByActionActionEnum];
