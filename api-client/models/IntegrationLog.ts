/* tslint:disable */
/* eslint-disable */
/**
 * Quote Portal API
 * API documentation for Quote Portal
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface IntegrationLog
 */
export interface IntegrationLog {
    /**
     * 
     * @type {number}
     * @memberof IntegrationLog
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    readonly user?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    readonly quote?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    action: IntegrationLogActionEnum;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    status: string;
    /**
     * 
     * @type {object}
     * @memberof IntegrationLog
     */
    payload: object;
    /**
     * 
     * @type {object}
     * @memberof IntegrationLog
     */
    response?: object | null;
    /**
     * 
     * @type {Date}
     * @memberof IntegrationLog
     */
    readonly createdAt?: Date;
}


/**
 * @export
 */
export const IntegrationLogActionEnum = {
    Erp: 'ERP',
    Crm: 'CRM',
    Status: 'STATUS'
} as const;
export type IntegrationLogActionEnum = typeof IntegrationLogActionEnum[keyof typeof IntegrationLogActionEnum];


/**
 * Check if a given object implements the IntegrationLog interface.
 */
export function instanceOfIntegrationLog(value: object): value is IntegrationLog {
    if (!('action' in value) || value['action'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('payload' in value) || value['payload'] === undefined) return false;
    return true;
}

export function IntegrationLogFromJSON(json: any): IntegrationLog {
    return IntegrationLogFromJSONTyped(json, false);
}

export function IntegrationLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntegrationLog {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'user': json['user'] == null ? undefined : json['user'],
        'quote': json['quote'] == null ? undefined : json['quote'],
        'action': json['action'],
        'status': json['status'],
        'payload': json['payload'],
        'response': json['response'] == null ? undefined : json['response'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
    };
}

export function IntegrationLogToJSON(json: any): IntegrationLog {
    return IntegrationLogToJSONTyped(json, false);
}

export function IntegrationLogToJSONTyped(value?: Omit<IntegrationLog, 'id'|'user'|'quote'|'created_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'action': value['action'],
        'status': value['status'],
        'payload': value['payload'],
        'response': value['response'],
    };
}

