/* tslint:disable */
/* eslint-disable */
/**
 * Quote Portal API
 * API documentation for Quote Portal
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Quote
 */
export interface Quote {
    /**
     * 
     * @type {number}
     * @memberof Quote
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    opportunityId: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    customerName: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    customerEmail: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    customerCompany?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    readonly supportingDocument?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Quote
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Quote
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof Quote
     */
    readonly submittedBy?: number;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    readonly status?: QuoteStatusEnum;
}


/**
 * @export
 */
export const QuoteStatusEnum = {
    PendingReview: 'Pending Review',
    Approved: 'Approved',
    Rejected: 'Rejected',
    Converted: 'Converted'
} as const;
export type QuoteStatusEnum = typeof QuoteStatusEnum[keyof typeof QuoteStatusEnum];


/**
 * Check if a given object implements the Quote interface.
 */
export function instanceOfQuote(value: object): value is Quote {
    if (!('opportunityId' in value) || value['opportunityId'] === undefined) return false;
    if (!('customerName' in value) || value['customerName'] === undefined) return false;
    if (!('customerEmail' in value) || value['customerEmail'] === undefined) return false;
    return true;
}

export function QuoteFromJSON(json: any): Quote {
    return QuoteFromJSONTyped(json, false);
}

export function QuoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Quote {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'opportunityId': json['opportunity_id'],
        'customerName': json['customer_name'],
        'customerEmail': json['customer_email'],
        'customerCompany': json['customer_company'] == null ? undefined : json['customer_company'],
        'supportingDocument': json['supporting_document'] == null ? undefined : json['supporting_document'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function QuoteToJSON(json: any): Quote {
    return QuoteToJSONTyped(json, false);
}

export function QuoteToJSONTyped(value?: Omit<Quote, 'id'|'supporting_document'|'created_at'|'updated_at'|'submitted_by'|'status'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'opportunity_id': value['opportunityId'],
        'customer_name': value['customerName'],
        'customer_email': value['customerEmail'],
        'customer_company': value['customerCompany'],
    };
}

